// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// draw_s_cpp
Rcpp::IntegerVector draw_s_cpp(Rcpp::NumericVector y, Rcpp::NumericVector h);
RcppExport SEXP _svmod_draw_s_cpp(SEXP ySEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_s_cpp(y, h));
    return rcpp_result_gen;
END_RCPP
}
// draw_h_cpp
Rcpp::NumericVector draw_h_cpp(Rcpp::NumericVector y, Rcpp::IntegerVector s, double phi, double sigma2, double mu);
RcppExport SEXP _svmod_draw_h_cpp(SEXP ySEXP, SEXP sSEXP, SEXP phiSEXP, SEXP sigma2SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_h_cpp(y, s, phi, sigma2, mu));
    return rcpp_result_gen;
END_RCPP
}
// draw_theta_cpp
Rcpp::NumericVector draw_theta_cpp(double h0, const Rcpp::NumericVector& h, double mu, double phi, double sigma, double Bsigma, double a0, double b0, double bmu, double Bmu, double B011inv, double B022inv);
RcppExport SEXP _svmod_draw_theta_cpp(SEXP h0SEXP, SEXP hSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP sigmaSEXP, SEXP BsigmaSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP bmuSEXP, SEXP BmuSEXP, SEXP B011invSEXP, SEXP B022invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type Bsigma(BsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type bmu(bmuSEXP);
    Rcpp::traits::input_parameter< double >::type Bmu(BmuSEXP);
    Rcpp::traits::input_parameter< double >::type B011inv(B011invSEXP);
    Rcpp::traits::input_parameter< double >::type B022inv(B022invSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_theta_cpp(h0, h, mu, phi, sigma, Bsigma, a0, b0, bmu, Bmu, B011inv, B022inv));
    return rcpp_result_gen;
END_RCPP
}
// draw_theta_cpp_test
Rcpp::List draw_theta_cpp_test(double h0, const Rcpp::NumericVector& h, double mu, double phi, double sigma, double Bsigma, double a0, double b0, double bmu, double Bmu, double B011inv, double B022inv);
RcppExport SEXP _svmod_draw_theta_cpp_test(SEXP h0SEXP, SEXP hSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP sigmaSEXP, SEXP BsigmaSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP bmuSEXP, SEXP BmuSEXP, SEXP B011invSEXP, SEXP B022invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type Bsigma(BsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type bmu(bmuSEXP);
    Rcpp::traits::input_parameter< double >::type Bmu(BmuSEXP);
    Rcpp::traits::input_parameter< double >::type B011inv(B011invSEXP);
    Rcpp::traits::input_parameter< double >::type B022inv(B022invSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_theta_cpp_test(h0, h, mu, phi, sigma, Bsigma, a0, b0, bmu, Bmu, B011inv, B022inv));
    return rcpp_result_gen;
END_RCPP
}
// draw_hX_cpp
Rcpp::List draw_hX_cpp(const Eigen::Map<Eigen::VectorXd> y, const Eigen::Map<Eigen::VectorXi> s, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> beta, const double phi, const double sigma2, const double mu);
RcppExport SEXP _svmod_draw_hX_cpp(SEXP ySEXP, SEXP sSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP sigma2SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_hX_cpp(y, s, X, beta, phi, sigma2, mu));
    return rcpp_result_gen;
END_RCPP
}
// invGamme_cpp
double invGamme_cpp(double cT, double CT);
RcppExport SEXP _svmod_invGamme_cpp(SEXP cTSEXP, SEXP CTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cT(cTSEXP);
    Rcpp::traits::input_parameter< double >::type CT(CTSEXP);
    rcpp_result_gen = Rcpp::wrap(invGamme_cpp(cT, CT));
    return rcpp_result_gen;
END_RCPP
}
// inv_Eigen
Eigen::MatrixXd inv_Eigen(Eigen::Map<Eigen::MatrixXd> M);
RcppExport SEXP _svmod_inv_Eigen(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_Eigen(M));
    return rcpp_result_gen;
END_RCPP
}
// chol_Eigen
Eigen::MatrixXd chol_Eigen(Eigen::Map<Eigen::MatrixXd> M);
RcppExport SEXP _svmod_chol_Eigen(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_Eigen(M));
    return rcpp_result_gen;
END_RCPP
}
// eigen_mat_mult1
SEXP eigen_mat_mult1(Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> X);
RcppExport SEXP _svmod_eigen_mat_mult1(SEXP ASEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_mat_mult1(A, X));
    return rcpp_result_gen;
END_RCPP
}
// eigen_mat_mult2
Eigen::MatrixXd eigen_mat_mult2(Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> X);
RcppExport SEXP _svmod_eigen_mat_mult2(SEXP ASEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_mat_mult2(A, X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_svmod_draw_s_cpp", (DL_FUNC) &_svmod_draw_s_cpp, 2},
    {"_svmod_draw_h_cpp", (DL_FUNC) &_svmod_draw_h_cpp, 5},
    {"_svmod_draw_theta_cpp", (DL_FUNC) &_svmod_draw_theta_cpp, 12},
    {"_svmod_draw_theta_cpp_test", (DL_FUNC) &_svmod_draw_theta_cpp_test, 12},
    {"_svmod_draw_hX_cpp", (DL_FUNC) &_svmod_draw_hX_cpp, 7},
    {"_svmod_invGamme_cpp", (DL_FUNC) &_svmod_invGamme_cpp, 2},
    {"_svmod_inv_Eigen", (DL_FUNC) &_svmod_inv_Eigen, 1},
    {"_svmod_chol_Eigen", (DL_FUNC) &_svmod_chol_Eigen, 1},
    {"_svmod_eigen_mat_mult1", (DL_FUNC) &_svmod_eigen_mat_mult1, 2},
    {"_svmod_eigen_mat_mult2", (DL_FUNC) &_svmod_eigen_mat_mult2, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_svmod(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
